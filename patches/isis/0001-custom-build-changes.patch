diff -ruN isis-git_orig/isis/cmake/AddIsisModule.cmake isis-git/isis/cmake/AddIsisModule.cmake
--- isis-git_orig/isis/cmake/AddIsisModule.cmake	2018-10-12 16:19:57.206428260 -0700
+++ isis-git/isis/cmake/AddIsisModule.cmake	2018-10-11 22:04:06.328474790 -0700
@@ -277,9 +277,9 @@
   endif()
 
   # Process the apps (core library always required)
-  foreach(f ${appFolders})
-    add_isis_app(${f} "${reqLibs}")
-  endforeach()
+  #foreach(f ${appFolders})
+  #  add_isis_app(${f} "${reqLibs}")
+  #endforeach()
 
   if(${buildTests})
     # Process the tests
diff -ruN isis-git_orig/isis/cmake/FindOpenCV.cmake isis-git/isis/cmake/FindOpenCV.cmake
--- isis-git_orig/isis/cmake/FindOpenCV.cmake	2018-10-12 16:19:57.208428373 -0700
+++ isis-git/isis/cmake/FindOpenCV.cmake	2018-10-11 16:50:54.454253108 -0700
@@ -11,7 +11,7 @@
 )
 
 find_library(OPENCV_CORE_LIBRARY              NAMES opencv_core)
-find_library(OPENCV_VIDEOSTAB_LIBRARY         NAMES opencv_videostab)
+#find_library(OPENCV_VIDEOSTAB_LIBRARY         NAMES opencv_videostab)
 find_library(OPENCV_VIDEO_LIBRARY             NAMES opencv_video)
 find_library(OPENCV_SUPERRES_LIBRARY          NAMES opencv_superres)
 find_library(OPENCV_STITCHING_LIBRARY         NAMES opencv_stitching)
@@ -30,7 +30,7 @@
 
 message(STATUS "OPENCV INCLUDE DIR: ${OPENCV_INCLUDE_DIR}")
 message(STATUS "OPENCV CORE LIB: ${OPENCV_CORE_LIBRARY}")
-message(STATUS "OPENCV VIDEOSTAB LIB: ${OPENCV_VIDEOSTAB_LIBRARY}")
+#message(STATUS "OPENCV VIDEOSTAB LIB: ${OPENCV_VIDEOSTAB_LIBRARY}")
 message(STATUS "OPENCV SUPERRES LIB: ${OPENCV_SUPERRES_LIBRARY}")
 message(STATUS "OPENCV STITCHING LIB: ${OPENCV_STITCHING_LIBRARY}")
 message(STATUS "OPENCV PHOTO LIB: ${OPENCV_PHOTO_LIBRARY}")
diff -ruN isis-git_orig/isis/cmake/Utilities.cmake isis-git/isis/cmake/Utilities.cmake
--- isis-git_orig/isis/cmake/Utilities.cmake	2018-10-12 16:19:57.209428429 -0700
+++ isis-git/isis/cmake/Utilities.cmake	2018-10-12 16:16:56.254278150 -0700
@@ -257,6 +257,17 @@
                                              ${CMAKE_INSTALL_PREFIX}/lib/lib${name}.a)")
   endif()
 
+  # Set all the header files to be installed to the include directory
+  foreach(f ${sourceFiles})
+    get_filename_component(extension ${f} EXT)
+    string( TOLOWER "${extension}" extensionLower )
+    # Compare this file extension to list of accepted header file extensions
+    if( extensionLower STREQUAL ".h" OR extensionLower STREQUAL ".hpp" OR extensionLower STREQUAL ".tcc")
+      set(fullPath "${CMAKE_CURRENT_SOURCE_DIR}/${f}")
+      INSTALL(FILES ${f} DESTINATION include)
+    endif()
+  endforeach(f)
+
 endfunction()
 
 function(get_version libFile returnVar)
diff -ruN isis-git_orig/isis/CMakeLists.txt isis-git/isis/CMakeLists.txt
--- isis-git_orig/isis/CMakeLists.txt	2018-10-12 16:19:57.478443515 -0700
+++ isis-git/isis/CMakeLists.txt	2018-10-12 16:11:46.243876021 -0700
@@ -58,7 +58,7 @@
 set(BUILD_SHARED_LIBS ON)
 
 # make sure to leave rpaths untouched on install
-set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
+set(CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)
 
 # Specify user options that can be passed in with the initial CMake command.
 option(isis3Data       "Directory containing Isis3Data"                 OFF )
@@ -149,12 +149,14 @@
 enable_testing()
 include(CTest)
 
+add_compile_options(-std=c++11)
+
 # Specify flags used
 # on linux, add the conda prefix to handle possible issues with rpaths at link time
 # sometimes third parties do not set their rpaths correctly
 set(thirdPartyCppFlags -Wall
                        -fPIC
-                       -std=c++11
+#                       -std=c++11
                        -DISIS_LITTLE_ENDIAN=1
                        -Wno-unused-parameter
                        -Wno-overloaded-virtual
@@ -169,12 +171,12 @@
 
 # Flag to fix numeric literals problem with boost on linux
 # Add gold linker (and therefore, phtread) to speed up linux (spec. Ubuntu18.04) builds
-if(NOT APPLE)
-  set(thirdPartyCppFlags ${thirdPartyCppFlags} -fuse-ld=gold
-	                                       -pthread
-					       -fext-numeric-literals
-                                               -Wl,-rpath,$ENV{CONDA_PREFIX}/lib)
-endif()
+#if(NOT APPLE)
+#  set(thirdPartyCppFlags ${thirdPartyCppFlags} -fuse-ld=gold
+#	                                       -pthread
+#					       -fext-numeric-literals
+#                                               -Wl,-rpath,$ENV{CONDA_PREFIX}/lib)
+#endif()
 
  # Append CPP flags set in the third party lib file to the string set in this file.
  string(REPLACE ";" " " FLAGS_STR "${thirdPartyCppFlags}")
@@ -182,6 +184,10 @@
 
 
 # Paths to required executables
+
+set(thirdPartyDir "${CMAKE_SOURCE_DIR}/../../../../install")
+set(INCLUDE_DIR "${thirdPartyDir}/include")
+
 find_program(XALAN Xalan REQUIRED)
 find_program(LATEX latex)
 find_program(DOXYGEN NAME doxygen PATH_SUFFIXES doxygen REQUIRED)
@@ -206,7 +212,7 @@
                 Sql
                 Svg
                 Test
-                WebChannel
+#                WebChannel
                 Widgets
                 Xml
                 XmlPatterns REQUIRED)
@@ -216,6 +222,7 @@
 # This only applies to v007, and outside of the building, we should only expect standard installs
 # The v007-specific installs are listed beside their find_package calls below:
 find_package(Boost     1.59.0  REQUIRED)
+set(BOOST_INCLUDE_DIR ${INCLUDE_DIR}/boost  ${INCLUDE_DIR}/boost/boost1.59.0 ${INCLUDE_DIR}/boost-1_59)
 find_package(Bullet    2.86    REQUIRED)
 find_package(Cholmod   4.4.5   REQUIRED)
 find_package(CSPICE    65      REQUIRED)
@@ -285,6 +292,9 @@
 list(REMOVE_DUPLICATES ALLLIBS)
 list(REMOVE_DUPLICATES ALLINCDIRS)
 
+# Move this to the end of the list because of linking order issues
+list(APPEND ALLLIBS ${AMD_LIBRARY})
+
 #===============================================================================
 #===============================================================================
 
@@ -366,9 +376,9 @@
 # Specify relative library include paths which will be set up on
 #  the installed files.
 if(APPLE)
-  set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_RPATH};@loader_path/../lib;@loader_path/../3rdParty/lib")
+  set(CMAKE_INSTALL_RPATH "@loader_path/../lib;@loader_path/../3rdParty/lib")
 else()
-  set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_RPATH};$ORIGIN/../lib;$ORIGIN/../3rdParty/lib")
+  set(CMAKE_INSTALL_RPATH "$ORIGIN/../lib;$ORIGIN/../3rdParty/lib")
 endif()
 
 # We will set up some links with these files at the end of the install process so
@@ -376,8 +386,8 @@
 install(CODE "EXECUTE_PROCESS(COMMAND rm -f ${CMAKE_INSTALL_PREFIX}/lib/libisis3.6.0${SO})")
 install(CODE "EXECUTE_PROCESS(COMMAND rm -f ${CMAKE_INSTALL_PREFIX}/lib/libisis3.6${SO})")
 install(CODE "EXECUTE_PROCESS(COMMAND rm -f ${CMAKE_INSTALL_PREFIX}/lib/libisis3.${SO})")
-EXECUTE_PROCESS(COMMAND cp -f ${CMAKE_SOURCE_DIR}/src/base/objs/Preference/TestPreferences ${CMAKE_BINARY_DIR}/)
-install(CODE "EXECUTE_PROCESS(COMMAND cp -f ${CMAKE_SOURCE_DIR}/src/base/objs/Preference/TestPreferences ${CMAKE_INSTALL_PREFIX}/)")
+#EXECUTE_PROCESS(COMMAND cp -f ${CMAKE_SOURCE_DIR}/src/base/objs/Preference/TestPreferences ${CMAKE_BINARY_DIR}/)
+#install(CODE "EXECUTE_PROCESS(COMMAND cp -f ${CMAKE_SOURCE_DIR}/src/base/objs/Preference/TestPreferences ${CMAKE_INSTALL_PREFIX}/)")
 install(CODE "EXECUTE_PROCESS(COMMAND cp -f ${CMAKE_SOURCE_DIR}/IsisPreferences ${CMAKE_INSTALL_PREFIX}/)")
 
 # Delete any existing plugin files in the build folder so they
@@ -388,7 +398,7 @@
 endif()
 
 # Add a config file to the install bin directory so that QT can find the plugin libraries.
-file(WRITE "${CMAKE_BINARY_DIR}/qt.conf" "[Paths]\nPlugins=../3rdParty/plugins/\n")
+file(WRITE "${CMAKE_BINARY_DIR}/qt.conf" "[Paths]\nPlugins=../lib/plugins/\n")
 install(FILES "${CMAKE_BINARY_DIR}/qt.conf" DESTINATION ${CMAKE_INSTALL_PREFIX}/bin/xml)
 
 #Create the inc directory
